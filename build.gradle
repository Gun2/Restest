buildscript {
	ext {
		queryDslVersion = "5.0.0"
		springBootVersion = '3.3.5'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'

	group = 'com.gun2'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '21'

	repositories {
		mavenCentral()
	}
}

subprojects {
	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		runtimeOnly 'com.h2database:h2'

		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
	}
	test {
		useJUnitPlatform()
	}
}



repositories {
	mavenCentral()
}

project(":app:manager-app"){
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-websocket'
		/*swagger*/
		implementation 'io.springfox:springfox-boot-starter:3.0.0'
		/*assertj*/
		testImplementation 'org.assertj:assertj-core:3.6.2'
		// https://mvnrepository.com/artifact/org.mockito/mockito-core
		testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.6.0'
		//websocket
		implementation 'org.springframework.boot:spring-boot-starter-websocket'
		implementation 'org.webjars:sockjs-client:1.1.2'
		implementation 'org.webjars:stomp-websocket:2.3.3-1'
		//lombok
		implementation 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		// https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5
		implementation 'org.apache.httpcomponents.client5:httpclient5'

		implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		runtimeOnly 'com.h2database:h2'
		runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslProjects = [
	project(":app:manager-app")
]
configure(querydslProjects) {
	apply plugin: 'io.spring.dependency-management'
	dependencies {
		//query-dsl
		implementation 'com.querydsl:querydsl-apt:5.0.0'
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		implementation 'com.querydsl:querydsl-core:5.0.0'
		annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	}

	// Querydsl 빌드 옵션 설정
	def generated = 'src/main/generated'

	// querydsl QClass 파일 생성 위치를 지정
	tasks.withType(JavaCompile) {
		options.getGeneratedSourceOutputDirectory().set(file(generated))
	}

	// java source set 에 querydsl QClass 위치 추가
	sourceSets {
		main.java.srcDirs += [ generated ]
	}

	// gradle clean 시에 QClass 디렉토리 삭제
	clean {
		delete file(generated)
	}
}

